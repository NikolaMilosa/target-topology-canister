type ChangeSubnetMembership = record {
  subnet_id : principal;
  node_ids_to_add : vec principal;
  node_ids_to_remove : vec principal;
};
type NakamotoCoefficient = record { value : nat8; attribute : text };
type Node = record {
  ip : text;
  node_id : principal;
  hostos_version : text;
  country : text;
  is_api_bn : bool;
  node_operator_id : principal;
  guestos_version : text;
  subnet_id : opt principal;
  node_provider_id : principal;
  dc_owner : text;
  node_reward_type : text;
  dc_id : text;
};
type Proposal = record {
  id : nat64;
  title : text;
  payload : ProposalPayload;
  timestamp_seconds : nat64;
};
type ProposalPayload = variant {
  ChangeSubnetMembership : ChangeSubnetMembership;
};
type Result = variant { Ok; Err : text };
type TargetTopology = record {
  entries : vec record { text; TopologyEntry };
  proposal : text;
  timestamp_seconds : nat64;
};
type TopologyEntry = record {
  subnet_limit_country : nat8;
  subnet_limit_data_center : nat8;
  subnet_id : principal;
  is_sev : bool;
  subnet_limit_data_center_owner : nat8;
  subnet_size : nat8;
  subnet_type : text;
  subnet_limit_node_provider : nat8;
};
type TopologyLimitReport = record {
  violations : vec TopologyLimitViolation;
  limit_name : text;
  limit_value : nat8;
};
type TopologyLimitViolation = record { found : nat8; value : text };
service : {
  add_nodes : (vec Node) -> (Result);
  add_proposals : (vec Proposal) -> ();
  add_topology : (TargetTopology) -> (Result);
  get_active_topology : () -> (opt TargetTopology) query;
  get_nakamoto_for_subnet : (principal) -> (opt vec NakamotoCoefficient) query;
  get_node : (principal) -> (opt Node) query;
  get_nodes : () -> (vec Node) query;
  get_nodes_for_subnet : (principal) -> (opt vec Node) query;
  get_proposals : () -> (vec Proposal) query;
  get_topology_report : (principal) -> (opt vec TopologyLimitReport) query;
}
